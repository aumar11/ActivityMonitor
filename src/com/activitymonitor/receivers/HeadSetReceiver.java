package com.activitymonitor.receivers;

import com.activitymonitor.preferences.Preferences;
import com.activitymonitor.services.ActivityGathererService;
import com.activitymonitor.services.SyncService;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.media.Ringtone;
import android.media.RingtoneManager;
import android.net.Uri;
import android.util.Log;
import android.view.KeyEvent;
import android.widget.Toast;

public class HeadSetReceiver extends BroadcastReceiver {
	/**
	 * Tag for use in logging and debugging the output generated by this class.
	 */
	public static final String TAG = "AccelerometerReceiver";

	public HeadSetReceiver(){
		super();
	}

	@Override
	public void onReceive(Context context, Intent intent) {
		String intentAction = intent.getAction();
		SharedPreferences settings = context.getSharedPreferences(Preferences.PREFS_NAME, Context.MODE_PRIVATE);
		SharedPreferences.Editor editor = settings.edit();

		if (!Intent.ACTION_MEDIA_BUTTON.equals(intentAction)) {
			return;
		}
		KeyEvent event = (KeyEvent)intent.getParcelableExtra(Intent.EXTRA_KEY_EVENT);
		if (event == null) {
			return;
		}
		int action = event.getAction();
		int keyCode = event.getKeyCode() ;

		if (action == KeyEvent.ACTION_DOWN && keyCode == KeyEvent.KEYCODE_HEADSETHOOK) {
			int state = settings.getInt(Preferences.CURRENT_STATE, Preferences.STATE_ERROR);
			String type = settings.getString(Preferences.CURRENT_TYPE, Preferences.TYPE_ERROR);
			if(state == Preferences.STATE_OFF){
				//Start recording data
				try {
					Uri notification = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
					Ringtone r = RingtoneManager.getRingtone(context, notification);
					r.play();
				} catch (Exception e) {}
				editor.putInt(Preferences.CURRENT_STATE, Preferences.STATE_ON);
				editor.commit();
				Toast.makeText(context, "Monitoring Activity Type: " + type,
						Toast.LENGTH_SHORT).show();
				startMainService(context);
			}
			else if(state == Preferences.STATE_ON){
				//stop recording data

				try {
					Uri notification = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
					Ringtone r = RingtoneManager.getRingtone(context, notification);
					r.play();
				} catch (Exception e) {}
				editor.putInt(Preferences.CURRENT_STATE, Preferences.STATE_OFF);
				editor.commit();
				Toast.makeText(context, "Stopped Monitoring",
						Toast.LENGTH_SHORT).show();
				stopMainService(context);
			}
			else{
				//Error occured
				//stop recording data
				editor.putInt(Preferences.CURRENT_STATE, Preferences.STATE_OFF);
				editor.commit();
				Toast.makeText(context, "An Error Occured",
						Toast.LENGTH_SHORT).show();
			}

		}


		abortBroadcast();

	}

	/**
	 * Starts the gathering service.
	 */
	public void startMainService(Context context){
		Log.d(TAG,"Trying to start the main service");
		Intent intent = new Intent(context, ActivityGathererService.class);
		context.startService(intent);
	}

	/**
	 * Stops the gathering service
	 */
	public void stopMainService(Context context){
		Intent intent = new Intent(context, ActivityGathererService.class);
		context.stopService(intent);
	    Intent syncIntent = new Intent(context, SyncService.class);
	    context.startService(syncIntent);
	}

}
