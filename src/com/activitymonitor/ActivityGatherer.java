package com.activitymonitor;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.media.Ringtone;
import android.media.RingtoneManager;
import android.net.Uri;
import android.os.Bundle;
import android.text.InputType;
import android.util.Log;
import android.view.Menu;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;

public class ActivityGatherer extends Activity {
	/**
	 * Tag for use in logging and debugging the output generated by this class.
	 */
	public final static String TAG = "ActivityGatherer";
	private boolean mIsRecording = false;
	private String labelName;


	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_activity_gatherer);
	}


	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.activity_gatherer, menu);
		return true;
	}
	/**
	 * 
	 * @param view
	 */
	public void setService(View view){
		// Cast View v to Button
		Button thisButton = (Button) view;
		EditText edtLabelName = (EditText) ActivityGatherer.this.findViewById(R.id.edtLabelName);
		//Set the label name for the next session of recording data
		labelName = edtLabelName.getText().toString();
		
		//Still need to improve this if statement but it will do for now!
		if(labelName.equals("")|| labelName.contains(" ")){
			//Inform the user to input a label name
			createLabelNameDialog();
		}
		else{

			//Stop service gathering accelerometer data
			if(mIsRecording){
				mIsRecording = false;
				thisButton.setText(R.string.record);
				//Need to Stop the service
				stopMainService();
			}
			else{
				mIsRecording = true;
				thisButton.setText(R.string.stop);
				//Inform the user the service has begun to record data with a notification
				try {
					Uri notification = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
					Ringtone r = RingtoneManager.getRingtone(getApplicationContext(), notification);
					r.play();
				} catch (Exception e) {}
				startMainService();

			}
		}

	}
	
	/**
	 * Creates a dialog telling the user that the airplane is turned on.
	 */
	private void createLabelNameDialog() {

		String msg = "You need to input a label name.";
		AlertDialog.Builder builder = new AlertDialog.Builder(ActivityGatherer.this);
		builder.setMessage(msg)
		.setCancelable(false)
		.setPositiveButton("OK", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int id) {
				dialog.cancel();
			}
		});
		AlertDialog alert = builder.create();
		alert.show();


	}


	/**
	 * Starts the gathering service.
	 */
	public void startMainService(){
		Log.d(TAG,"Trying to start the main service");
		Intent intent = new Intent(getApplicationContext(), ActivityGathererService.class);
		intent.putExtra("labelName", labelName);
		startService(intent);
	}

	/**
	 * Stops the gathering service
	 */
	public void stopMainService(){
		Intent intent = new Intent(getApplicationContext(), ActivityGathererService.class);
		stopService(intent);
	}


}
