package com.activitymonitor.services;


import com.activitymonitor.listeners.AccelerometerListener;
import com.activitymonitor.receivers.SyncAlarmReceiver;

import android.app.AlarmManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.hardware.Sensor;
import android.hardware.SensorManager;
import android.os.IBinder;
import android.os.SystemClock;
import android.util.Log;



public class ActivityGathererService extends Service {
	  /**
	   * Tag for use in logging and debugging the output generated by this class.
	   */
	  public final static String TAG = "ActivityGathererService";


	// AlarmManager for sync and bluetooth discovery services
	private AlarmManager mAlarmManager;
	private AccelerometerListener mAccelerometerReceiver;
	private SensorManager mSensorManager;
	private boolean mGatheringSamples;
	private Intent mSyncIntent;
	private PendingIntent mSyncPendingIntent;
	private boolean mIsSynching;

	/**
	 * Server synchronisation period (ATM, once every 1 minute).
	 */
	private final static long SYNC_PERIOD = AlarmManager.INTERVAL_FIFTEEN_MINUTES / 15; // 5 minutes
	/**
	 * Called when the service is first created.
	 */
	@Override
	public void onCreate() {
		super.onCreate();
	}
	
	/**
	 * Called when the service is started.
	 */
	@Override
	public int onStartCommand(Intent i, int flags, int startId) {
		super.onStartCommand(i, flags, startId);
		Log.i(TAG, "Service is running");
		// Get AlarmManager for sync 
		mAlarmManager = (AlarmManager) getSystemService(Context.ALARM_SERVICE);

		// Start gathering data
		startGathering();
		//Start syncing to the central server
		startSync();
		return 0;
	}
	/**
	 * Called when the stopService() method is invoked
	 * may not be called though
	 */
	@Override
	public void onDestroy(){
		super.onDestroy();
		Log.i(TAG,"Stopping the service");
		stopGathering();
		stopSync();
	}
	/**
	 * Starts synchronisation service. This method schedules for repeating the execution of
	 * the server synchronisation service.
	 */
	private void startSync() {
		mSyncIntent = new Intent(getApplicationContext(), SyncAlarmReceiver.class);
		mSyncPendingIntent = PendingIntent.getBroadcast(getApplicationContext(), 0, mSyncIntent, 0);
		mAlarmManager.setInexactRepeating(AlarmManager.ELAPSED_REALTIME_WAKEUP, SystemClock.elapsedRealtime(),
				SYNC_PERIOD, mSyncPendingIntent);
		mIsSynching = true;
		Log.i(TAG, "Setting synchronisation interval to " + SYNC_PERIOD + "ms");
	}

	/**
	 * Stops synchronisation service.
	 */
	private void stopSync() {
		if (mSyncPendingIntent != null)
			mAlarmManager.cancel(mSyncPendingIntent);
		mIsSynching = false;
	}

	private void startGathering() {
	
		mAccelerometerReceiver = new AccelerometerListener(getApplicationContext());
		mSensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
		mSensorManager.registerListener(mAccelerometerReceiver, mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER), 100000);
		mGatheringSamples = true;
	}

	private void stopGathering(){
		if(mSensorManager!= null){
			mSensorManager.unregisterListener(mAccelerometerReceiver, mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER));
			mGatheringSamples = false;
		}
	}

	@Override
	public IBinder onBind(Intent arg0) {
		// TODO Auto-generated method stub
		return null;
	}

}

